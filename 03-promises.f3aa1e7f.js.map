{"mappings":"gfAAAA,EAAA,UAEqB,CACnBC,KAAMC,SAASC,cAAc,WAIlBF,KAAKG,iBAAiB,UAGnC,SAAqBC,GAEmBA,EAAlCC,iBAEJ,IAAiCC,EAAAF,EAAIG,cAA7BC,EAAyBF,EAAzBG,MAAQC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAGhBC,EAAgB,IAAIC,MAAMC,OAAOH,EAAOI,QAC3CC,OACAC,KAAI,SAACC,EAAKC,GAKT,OASsE,SAArDC,EAAUX,GAE/B,OAAO,IAAIY,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,IAGpCH,EAAO,CAACH,WAAUX,UAEpBa,EAAQ,CAACF,WAAUX,S,GAClBA,E,IAnBMkB,CAHUR,EAAQ,EACJL,OAAON,EAAMO,OAASI,EAAQL,OAAOJ,EAAKK,O,IAKnEa,QAAQC,IAAIjB,GACZS,QAAQS,IAAIlB,GAAemB,MAAK,SAAAC,G,IAAEZ,EAAQY,EAARZ,SAAUX,EAAKuB,EAALvB,M,OAAWmB,QAAQC,IAAI,sBAAuBT,EAAUX,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst comandInputs = {\n  form: document.querySelector('.form'),\n}\n  const promisesArray = [];\n// ######################################################\ncomandInputs.form.addEventListener('submit', getFormData);\n// ######################################################\n\nfunction getFormData(evt) { \n  // 1 після підтвердження форми отримуємо її дані\n  evt.preventDefault();\n  // ******************\n  const { delay , step, amount } = evt.currentTarget;\n\n  //const promise = createPromise(delay) // ****\n  const promisesArray = new Array(Number(amount.value))\n    .fill()\n    .map((val, index) => {\n\n      const position = index + 1;\n      const promiseDelay = Number(delay.value) + index * Number(step.value);\n      // console.log('position: ', position, 'promiseDelay', promiseDelay)\n      return createPromise(position, promiseDelay);\n    });\n  \n  console.log(promisesArray)\n  Promise.all(promisesArray).then(({position, delay}) => console.log('Value from then(): ', position, delay));\n  // callPromises(promisesArray);\n};\n\n// 2 пишемо функцію яка отримуватиме параметр 'delay' та поверне проміс через вказаний проміжок часу\nfunction createPromise(position, delay) { \n \n  return new Promise((resolve, reject) => { \n    setTimeout(() => { \n      const shouldResolve = Math.random() > 0.3;\n\n      if (!shouldResolve) { \n        reject({position, delay});\n      }\n      resolve({position, delay});\n    }, delay)\n  })\n};\n\nfunction callPromises(promises) {\n//   // 3 викликаємо функцію яка створює проміси в тій кількості, яку ми задали в полі 'amount'\n  Promise.all(promises).then((val) => console.log('Value from then(): ', val)).catch((err) => console.log(err));\n    //   createPromise(i, delay)\n  //     .then(({ position, delay }) => { console.log(`✅ Fulfilled promise ${position} in ${delay}ms`) })\n  //     .catch(({ position, delay }) => { console.log(`❌ Rejected promise ${position} in ${delay}ms`) })\n  // };\n}\n\n// 1 після підтвердження форми отримуємо її дані\n// 2 пишемо функцію яка отримуватиме параметр 'delay' та поверне проміс через вказаний проміжок часу\n// 3 викликаємо функцію яка створює проміси в тій кількості, яку ми задали в полі 'amount'\n// 4 при створені промісів кожен наступний проміс створюється через вказаний проміжок часу + заданий крок(step)\n// 5 якщо умова вірна у функції виклику то повертаємо успішний проміс\n\n/*\n  HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, \n  крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\n<form class=\"form\">\n  <label>\n    First delay (ms)\n    <input type=\"number\" name=\"delay\" required />\n  </label>\n  <label>\n    Delay step (ms)\n    <input type=\"number\" name=\"step\" required />\n  </label>\n  <label>\n    Amount\n    <input type=\"number\" name=\"amount\" required />\n  </label>\n  <button type=\"submit\">Create promises</button>\n</form>\n\nНапиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. \nПід час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), \nвведену користувачем, і крок (step).\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n\nДоповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. \nЗначенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. \nВикористовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\nБібліотека повідомлень\nУВАГА\nНаступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n\nДля відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix.\n*/\n"],"names":["parcelRequire","form","document","querySelector","addEventListener","evt","preventDefault","_currentTarget","currentTarget","delay1","delay","step","amount","promisesArray1","Array","Number","value","fill","map","val","index","position","Promise","resolve","reject","setTimeout","Math","random","$ce04d3a99e08e73b$var$createPromise","console","log","all","then","param"],"version":3,"file":"03-promises.f3aa1e7f.js.map"}