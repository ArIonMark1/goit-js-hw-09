{"mappings":"oeAAAA,EAAA,UAEqB,CACnBC,KAAMC,SAASC,cAAc,WAIlBF,KAAKG,iBAAiB,UAGnC,SAAqBC,GAEmBA,EAAlCC,iBAEJ,MAAMC,MAAEA,EAAKC,KAAGA,EAAIC,OAAEA,GAAWJ,EAAIK,cAE/BC,EAAgB,IAAIC,MAAMC,OAAOJ,EAAOK,QAC3CC,OACAC,KAAI,CAACC,EAAKC,IAiBf,SAAuBC,EAAUZ,GAK/B,OAAO,IAAIa,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,IAGpCH,EAAO,C,SAACH,E,MAAUZ,IAEpBc,EAAQ,C,SAACF,E,MAAUZ,GAAO,GACzBA,EAAM,G,CAzBAmB,CAHUR,EAAQ,EACJL,OAAON,EAAMO,OAASI,EAAQL,OAAOL,EAAKM,UAMnEa,QAAQC,IAAIjB,GAEZS,QAAQS,IAAIlB,GACTmB,MAAMC,GAAMJ,QAAQC,IAAI,sBAAuBG,KAC/CC,OAAOC,GAAQN,QAAQC,IAAIK,I","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst comandInputs = {\n  form: document.querySelector('.form'),\n}\n  const promisesArray = [];\n// ######################################################\ncomandInputs.form.addEventListener('submit', getFormData);\n// ######################################################\n\nfunction getFormData(evt) { \n  // 1 після підтвердження форми отримуємо її дані\n  evt.preventDefault();\n  // ******************\n  const { delay , step, amount } = evt.currentTarget;\n\n  const promisesArray = new Array(Number(amount.value))\n    .fill()\n    .map((val, index) => {\n\n      const position = index + 1;\n      const promiseDelay = Number(delay.value) + index * Number(step.value);\n\n      return createPromise(position, promiseDelay);\n      \n    });\n  \n  console.log(promisesArray) // ok\n\n  Promise.all(promisesArray)\n    .then((x) => console.log('Value from then(): ', x))\n    .catch((err) => console.log(err));\n  // callPromises(promisesArray);\n};\n\nfunction createPromise(position, delay) { \n /*\n  2 пишемо функцію яка отримуватиме параметр 'delay' \n  та поверне проміс через вказаний проміжок часу\n */\n  return new Promise((resolve, reject) => { \n    setTimeout(() => { \n      const shouldResolve = Math.random() > 0.3;\n\n      if (!shouldResolve) { \n        reject({position, delay});\n      }\n      resolve({position, delay});\n    }, delay)\n  })\n};\n\n// function callPromises(promises) {\n//   // 3 викликаємо функцію яка створює проміси в тій кількості, яку ми задали в полі 'amount'\n//   Promise.all(promises)\n//     .then((val) => console.log('Value from then(): ', val))\n//     .catch((err) => console.log(err));\n\n// }\n\n// 1 після підтвердження форми отримуємо її дані\n// 2 пишемо функцію яка отримуватиме параметр 'delay' та поверне проміс через вказаний проміжок часу\n// 3 викликаємо функцію яка створює проміси в тій кількості, яку ми задали в полі 'amount'\n// 4 при створені промісів кожен наступний проміс створюється через вказаний проміжок часу + заданий крок(step)\n// 5 якщо умова вірна у функції виклику то повертаємо успішний проміс\n"],"names":["parcelRequire","form","document","querySelector","addEventListener","evt","preventDefault","delay","step","amount","currentTarget","promisesArray1","Array","Number","value","fill","map","val","index","position","Promise","resolve","reject","setTimeout","Math","random","$47d4ff9957288465$var$createPromise","console","log","all","then","x","catch","err"],"version":3,"file":"03-promises.fa6a38fc.js.map"}