{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,UAEqB,CACnBC,KAAMC,SAASC,cAAc,WAGlBF,KAAKG,iBAAiB,UAGnC,SAAqBC,GAEmBA,EAAlCC,iBAKJ,IAAgCC,EAAAF,EAAIG,cAA5BC,EAAwBF,EAAxBE,MAAOC,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,OAgEMC,EA5DL,IAAIC,MAAMC,OAAOH,EAAOI,QAC3CC,OACAC,KAAI,SAACC,EAAKC,GAKT,OAQN,SAAuBC,EAAUX,GAK/B,OAAO,IAAIY,SAAQ,SAACC,EAASC,GAE3BC,YAAW,WACaC,KAAKC,SAAW,IAGpCH,EAAO,CAACH,WAAUX,UAEpBa,EAAQ,CAACF,WAAUX,S,GAClBA,E,IAtBMkB,CAHUR,EAAQ,EACJL,OAAOL,EAAMM,OAASI,EAAQL,OAAOJ,EAAKK,O,IAwDnEH,EAAWgB,SAAQ,SAAAC,GACjBA,EACGC,MAAK,SAAAC,G,IAAGX,EAAQW,EAARX,SAAUX,EAAKsB,EAALtB,MACjBuB,EAAAjC,GAASkC,OAAOC,QAAQ,uBAAwCC,OAAff,EAAS,QAAYe,OAAN1B,EAAM,M,IAEvE2B,OAAM,SAAAL,G,IAAGX,EAAQW,EAARX,SAAUX,EAAKsB,EAALtB,MAClBuB,EAAAjC,GAASkC,OAAOI,QAAQ,sBAAqCF,OAAff,EAAS,QAAYe,OAAN1B,EAAM,M,OAP/C,IAACG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst comandInputs = {\n  form: document.querySelector('.form'),\n}\n// ######################################################\ncomandInputs.form.addEventListener('submit', getFormData);\n// ######################################################\n\nfunction getFormData(evt) { \n  // 1 після підтвердження форми отримуємо її дані\n  evt.preventDefault();\n  // ******************\n  // Активація першого варіанту запуску\n  // callPromises(evt.currentTarget);\n  // ******************\n  const { delay, step, amount } = evt.currentTarget\n  // При підтверджені повертає три поля з даними !!!!\n  \n  // створюємо масив промісів котрим передаємо їх індекс та тривалість виклику\n  const promisesArray = new Array(Number(amount.value))\n    .fill()\n    .map((val, index) => {\n\n      const position = index + 1;\n      const promiseDelay = Number(delay.value) + index * Number(step.value);\n\n      return createPromise(position, promiseDelay);\n    });\n  // **********************************\n  // Активація другого варіанту запуску\n  callPromisesFromArr(promisesArray);\n};\n\n// *************************************************\nfunction createPromise(position, delay) { \n /*\n  2 пишемо функцію яка отримуватиме параметр 'delay' \n  та поверне проміс через вказаний проміжок часу\n */\n  return new Promise((resolve, reject) => { \n\n    setTimeout(() => { \n      const shouldResolve = Math.random() > 0.3;\n\n      if (!shouldResolve) { \n        reject({position, delay});\n      }\n      resolve({position, delay});\n    }, delay)\n  })\n};\n\n// *************************************************\n// *** Перший варіант запуску Промісів ***\n// function callPromises(formElement) {\n//   // 3 викликаємо функцію яка створює проміси в тій кількості, яку ми задали в полі 'amount'\n//   const [delay, step, amount] = formElement;\n//   console.log('=> ', delay.value, step.value, amount.value);\n\n//   for (let index = 0; index < Number(amount.value); index++) { \n\n//     const position = index + 1;\n//     const promiseDelay = Number(delay.value) + index * Number(step.value);\n\n//     createPromise(position, promiseDelay)\n//       .then(({ position, delay }) => {\n\n//         Notiflix.Notify.success(`Success: ${position} : ${delay}`);\n//         console.log(`Success: ${position} : ${delay}`);\n//       })\n//       .catch(({ position, delay }) => {\n\n//         Notiflix.Notify.failure(`Error!: ${position} : ${delay}`);\n//         console.error(`Error!: ${position} : ${delay}`)\n//       });\n//   };\n\n// }\n// *** Другий варіант запуску Промісів ***\nfunction callPromisesFromArr(promiseArr) { \n  promiseArr.forEach(promise => {\n    promise\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    \n  });\n}\n"],"names":["$6JpON","parcelRequire","form","document","querySelector","addEventListener","evt","preventDefault","_currentTarget","currentTarget","delay","step","amount","promiseArr","Array","Number","value","fill","map","val","index","position","Promise","resolve","reject","setTimeout","Math","random","$ce04d3a99e08e73b$var$createPromise","forEach","promise","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.d6a17d03.js.map"}