{"mappings":"gfAAAA,EAAA,UAEqB,CACnBC,KAAMC,SAASC,cAAc,WAIlBF,KAAKG,iBAAiB,UAGnC,SAAqBC,GAEmBA,EAAlCC,iBAEJ,IAAiCC,EAAAF,EAAIG,cAA7BC,EAAyBF,EAAzBE,MAAQC,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,OAEhBC,EAAgB,IAAIC,MAAMC,OAAOH,EAAOI,QAC3CC,OACAC,KAAI,SAACC,EAAKC,GAKT,OAYN,SAAuBC,EAAUX,GAK/B,OAAO,IAAIY,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,IAGpCH,EAAO,CAACH,WAAUX,UAEpBa,EAAQ,CAACF,WAAUX,S,GAClBA,E,IAzBMkB,CAHUR,EAAQ,EACJL,OAAOL,EAAMM,OAASI,EAAQL,OAAOJ,EAAKK,O,IAMnEa,QAAQC,IAAIjB,GAEZS,QAAQS,IAAIlB,GACTmB,MAAK,SAACC,G,OAAMJ,QAAQC,IAAI,sBAAuBG,E,IAC/CC,OAAM,SAACC,G,OAAQN,QAAQC,IAAIK,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst comandInputs = {\n  form: document.querySelector('.form'),\n}\n  const promisesArray = [];\n// ######################################################\ncomandInputs.form.addEventListener('submit', getFormData);\n// ######################################################\n\nfunction getFormData(evt) { \n  // 1 після підтвердження форми отримуємо її дані\n  evt.preventDefault();\n  // ******************\n  const { delay , step, amount } = evt.currentTarget;\n\n  const promisesArray = new Array(Number(amount.value))\n    .fill()\n    .map((val, index) => {\n\n      const position = index + 1;\n      const promiseDelay = Number(delay.value) + index * Number(step.value);\n\n      return createPromise(position, promiseDelay);\n      \n    });\n  \n  console.log(promisesArray) // ok\n\n  Promise.all(promisesArray)\n    .then((x) => console.log('Value from then(): ', x))\n    .catch((err) => console.log(err));\n  // callPromises(promisesArray);\n};\n\nfunction createPromise(position, delay) { \n /*\n  2 пишемо функцію яка отримуватиме параметр 'delay' \n  та поверне проміс через вказаний проміжок часу\n */\n  return new Promise((resolve, reject) => { \n    setTimeout(() => { \n      const shouldResolve = Math.random() > 0.3;\n\n      if (!shouldResolve) { \n        reject({position, delay});\n      }\n      resolve({position, delay});\n    }, delay)\n  })\n};\n\n// function callPromises(promises) {\n//   // 3 викликаємо функцію яка створює проміси в тій кількості, яку ми задали в полі 'amount'\n//   Promise.all(promises)\n//     .then((val) => console.log('Value from then(): ', val))\n//     .catch((err) => console.log(err));\n\n// }\n\n// 1 після підтвердження форми отримуємо її дані\n// 2 пишемо функцію яка отримуватиме параметр 'delay' та поверне проміс через вказаний проміжок часу\n// 3 викликаємо функцію яка створює проміси в тій кількості, яку ми задали в полі 'amount'\n// 4 при створені промісів кожен наступний проміс створюється через вказаний проміжок часу + заданий крок(step)\n// 5 якщо умова вірна у функції виклику то повертаємо успішний проміс\n"],"names":["parcelRequire","form","document","querySelector","addEventListener","evt","preventDefault","_currentTarget","currentTarget","delay","step","amount","promisesArray1","Array","Number","value","fill","map","val","index","position","Promise","resolve","reject","setTimeout","Math","random","$ce04d3a99e08e73b$var$createPromise","console","log","all","then","x","catch","err"],"version":3,"file":"03-promises.b7e029d5.js.map"}