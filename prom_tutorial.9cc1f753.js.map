{"mappings":"AACA,MAAMA,EAAU,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAaC,KAAKC,SAAW,GAEnCC,YAAW,KAELH,GACFF,EAAQ,4CAEVC,EAAM,4CAA4C,GACjD,IAAK,IAGVK,QAAQC,IAAIT,GAGqCA,EAAzCU,MAAKC,GAAOH,QAAQC,IAAIE,KAAMC,GAAOJ,QAAQC,IAAIG,KAKvC,IAAAC,KAcR,aAZC,IAAIZ,SAAQ,CAACa,EAASC,KACzB,MAAMC,EAASX,KAAKC,SAAW,GAE/BC,YAAW,KACHS,GACAF,EAAQ,iBAAiBD,qCAE7BE,EAAO,8CAA8C,GAR/C,IASD,KAKZL,MAAMC,GAAQH,QAAQC,IAAIE,KAC1BM,OAAOL,GAAQJ,QAAQC,IAAIG,KAqChCJ,QAAQC,IAAI,yCAEZ,MAAMS,EAZS,CACX,WACA,UACA,kBACA,aACA,SACA,SACA,cAKoBC,KAAIC,GAM5B,SAAaA,GACT,OAAO,IAAInB,SAAQa,IAEf,MAAMO,GASSC,EATY,IASPC,EATa,KAU9BlB,KAAKmB,MAAMnB,KAAKC,UAAYiB,EAAMD,EAAM,GAAKA,IADxD,IAAuBA,EAAKC,EARpBhB,YAAW,KACPO,EAAQ,C,MAAEM,E,KAAOC,GAAO,GACzBA,EAAK,G,CAZqBI,CAAIL,KACzCZ,QAAQC,IAAIS,GAEZjB,QAAQyB,KAAKR,GAAUR,MAAK,EAACU,MAAEA,EAAKC,KAAEA,KAAWb,QAAQC,IAAIW,EAAM,2BAA4B,QAASC,KACxGpB,QAAQ0B,IAAIT,GAAUR,MAAKkB,GAAKpB,QAAQC,IAAImB,KAmB5CpB,QAAQC,IAAI,mBAkBU,IAAIR,SAAQ,CAACa,EAASC,KACxCR,YAAW,KACPC,QAAQC,IAAI,qBAMZK,EALoB,CAChBe,OAAQ,MACRC,KAAM,IACNC,UAAW,WAEK,GACrB,IAAK,IAGErB,MAAKsB,GAER,IAAI/B,SAAQ,CAACa,EAASC,KACzBR,YAAW,KACPyB,EAAKC,UAAW,EAChBlB,EAAOiB,EAAK,GAEb,IAAK,MAEbtB,MAAMwB,IACL1B,QAAQC,IAAI,gBAAiByB,EAAY,IAE1CjB,OAAML,IACLJ,QAAQL,MAAM,UAAWS,EAAI","sources":["src/js/promices_tutorial.js"],"sourcesContent":["// \"use strict\"\nconst promise = new Promise((success, error) => { \n  const randChoise = Math.random() > 0.5;\n\n  setTimeout(() => { \n      \n    if (randChoise) {\n      success('Your choise is correct. Congratulations!')\n    }\n    error('Your choise is wrong. You will be burned!')\n  }, 2000)\n\n});\nconsole.log(promise)\n// then(onSuccess, onFailure)\n// планування, відкладені виклики функцій які знаходяться в then()\npromise.then(res => console.log(res), err => console.log(err));\n// по цепочкі можна викликати скільки завгодно then() але вони працюватимуть тільки тоді,\n// коли з попереднього then() ми повернемо якісь дані:\n// promise.then(() => { return 'hello' }).then((val) => { return val + 'world' }).then((val) => { console.log(val + '!') }) ==> 'Hello world !'\n\nconst makeOrder = dish => { \n    const DELAY = 1000;\n    return new Promise((resolve, reject) => { \n        const passed = Math.random() > 0.5;\n\n        setTimeout(() => {\n            if (passed) {\n                resolve(`Your order is ${dish} it will be ready in 10 minutes.`)\n            }\n            reject('Sorry we can`t fulfill your order ( *__*,) ')\n        }, DELAY);\n    })\n}\n\nmakeOrder('CheaseKake')\n    .then((res) => console.log(res))\n    .catch((err) => console.log(err));\n\n// fetch(data) повертає проміс\n\nlet pokemonNumber = 0;\n\nconst fetchPokemonById = id => {\n    return fetch(`https://pokeapi.co/api/v2/pokemon/${id}`).then(res => res.json());\n};\n\n\n// const pokemonShowId = setInterval(() => {\n//     console.log(pokemonNumber);\n//         pokemonNumber += 1;\n//     fetchPokemonById(pokemonNumber)\n//         .then(pokemon => console.log(pokemon.name, ':', pokemon))\n//         .catch((err) => {\n//             console.log('Error in the block catch: ', err);\n//         });\n//     if (pokemonNumber > 10) {\n//         clearInterval(pokemonShowId)\n//     }\n//         }, 1000);\n\n// ###############################################################\n// ###############################################################\n\nconst horses = [\n    'Secretar',\n    'Eclipse',\n    'West Australian',\n    'Flying Fox',\n    'Dragon',\n    'Donkey',\n    'Seabiscuit',\n];\n\nconsole.log(\"Забіг почався, ставки не приймаються!\")\n\nconst promises = horses.map(horse => run(horse));\nconsole.log(promises);\n\nPromise.race(promises).then(({ horse, time }) => console.log(horse,'is the winner!! His time', ' : ==', time));\nPromise.all(promises).then(x => console.log(x));\n\nfunction run(horse) { \n    return new Promise(resolve => {\n\n        const time = getRandomTime(2000, 3500);\n        setTimeout(() => {\n            resolve({ horse, time });\n        }, time);\n    });\n};\n// run('Star').then((res) => console.log(res)).catch((err) => console.log(err));\n\n\nfunction getRandomTime(min, max) { \n    return Math.floor(Math.random() * (max - min + 1) + min); \n}\n\n// #######################################################\nconsole.log('Request data...');\n\n// setTimeout(() => {\n//     console.log('Preparing data...');\n\n//     const backendData = {\n//         server: 'aws',\n//         port: 2000,\n//         status: 'working'\n//     }\n\n//     setTimeout(() => {\n//         backendData.modified = true;\n//         console.log('Data received', backendData);\n//     }, 2000)\n\n// }, 2000);\n\nconst serverPromise = new Promise((resolve, reject) => {\n    setTimeout(() => { \n        console.log('Preparing data...');\n        const backendData = {\n            server: 'aws',\n            port: 2000,\n            statusbar: 'working'\n        }\n        resolve(backendData);\n    }, 2000)\n});\n\nserverPromise.then(data => {\n    // console.log('Promise resolved', data);\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            data.modified = true;\n            reject(data);\n            // console.log('Data received', data);\n        }, 2000)\n    })\n}).then((updatedData) => { \n    console.log('Data received', updatedData);\n    \n}).catch(err => { \n    console.error(\"Error: \", err);\n});\n"],"names":["$cbb9bbbc155dba7a$var$promise","Promise","success","error","randChoise","Math","random","setTimeout","console","log","then","res","err","dish","resolve","reject","passed","catch","$cbb9bbbc155dba7a$var$promises","map","horse","time","min","max","floor","$cbb9bbbc155dba7a$var$run","race","all","x","server","port","statusbar","data","modified","updatedData"],"version":3,"file":"prom_tutorial.9cc1f753.js.map"}