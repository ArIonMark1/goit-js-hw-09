{"mappings":"AACA,MAAMA,EAAO,CACTC,SAAUC,SAASC,cAAc,8BACjCC,QAASF,SAASC,cAAc,6BAChCE,UAAWH,SAASC,cAAc,kBAkDtC,MAAMG,EAAQ,IA/Cd,MAQIC,OACI,MAAMC,EAAOC,KAAKC,kBAAkB,GACpCD,KAAKE,OAAOH,E,CAGhBI,IAAIC,GACJ,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAEjCL,kBAAkBF,GAKlB,MAAO,C,MAJOC,KAAKG,IAAKI,KAAKC,MAAMT,EAAS,MAAyB,O,KACxDC,KAAKG,IAAII,KAAKC,MAAMT,EAAS,KAAoB,M,KACjDC,KAAKG,IAAII,KAAKC,MAAMT,EAAS,IAAc,M,CAIxDU,QACI,GAAIT,KAAKU,SACL,OAEJ,MAAMC,EAAYC,KAAKC,MACvBb,KAAKU,UAAW,EAEhBV,KAAKc,WAAaC,aAAY,KAE1B,MACMC,EADcJ,KAAKC,MACOF,EAC1BZ,EAAOC,KAAKC,kBAAkBe,GAEpChB,KAAKE,OAAOH,EAAK,GAClB,I,CAEPkB,OACIC,cAAclB,KAAKc,YACnBd,KAAKU,UAAW,EAChB,MAAMX,EAAOC,KAAKC,kBAAkB,GACpCD,KAAKE,OAAOH,E,CA1ChBoB,aAAYjB,OAAEA,IAEVF,KAAKc,WAAa,KAClBd,KAAKU,UAAW,EAChBV,KAAKE,OAASA,EACdF,KAAKF,M,GAyCW,CACpBI,OAGJ,UAAyBkB,MAAEA,EAAKC,KAAEA,EAAIC,KAAEA,IACpC/B,EAAKK,UAAU2B,YAAc,GAAGH,KAASC,KAAQC,G,IAGrD/B,EAAKC,SAASgC,iBAAiB,QAAS3B,EAAMY,MAAMgB,KAAK5B,IAEzDN,EAAKI,QAAQ6B,iBAAiB,QAAS3B,EAAMoB,KAAKQ,KAAK5B","sources":["src/js/timer.js"],"sourcesContent":["\nconst refs = {\n    startBtn: document.querySelector('button[data-actions-start]'),\n    stopBtn: document.querySelector('button[data-actions-stop]'),\n    clockface: document.querySelector('.js-clockface'),\n}\n\nclass Timer { \n    constructor({ onTick }) { \n        \n        this.intervalId = null;\n        this.isActive = false;\n        this.onTick = onTick;\n        this.init();\n    }\n    init() { \n        const time = this.getTimeComponents(0);\n        this.onTick(time);\n    }\n\n    pad(value) { \n    return String(value).padStart(2, '0');\n    }\n    getTimeComponents(time) { \n    const hours = this.pad( Math.floor((time % (1000 * 60 * 60 *24 )) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { hours, mins, secs };\n    }\n    start() { \n        if (this.isActive) { \n            return;\n        };\n        const startTime = Date.now();\n        this.isActive = true;\n\n        this.intervalId = setInterval(() => { \n\n            const currentTime = Date.now();\n            const deltaTime = currentTime - startTime;\n            const time = this.getTimeComponents(deltaTime);\n\n            this.onTick(time)\n        }, 1000);\n    }\n    stop() { \n        clearInterval(this.intervalId);\n        this.isActive = false;\n        const time = this.getTimeComponents(0);\n        this.onTick(time);\n    }\n};\n\nconst timer = new Timer({\n    onTick: updateClockface\n});\n\nfunction updateClockface({ hours, mins, secs }) { \n    refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n}\n// ###############################################\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\n\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n// ###############################################\n\n\n \n"],"names":["$7e81353768b819eb$var$refs","startBtn","document","querySelector","stopBtn","clockface","$7e81353768b819eb$var$timer","init","time","this","getTimeComponents","onTick","pad","value","String","padStart","Math","floor","start","isActive","startTime","Date","now","intervalId","setInterval","deltaTime","stop","clearInterval","constructor","hours","mins","secs","textContent","addEventListener","bind"],"version":3,"file":"timer.dbb8a203.js.map"}